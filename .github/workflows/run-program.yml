name: Flask Server and Dependent Script Runner

on:
  schedule:
    - cron: '0 11 * * *'  # This will run the job at 11:00 AM UTC every day
  workflow_dispatch:  # This allows for manual trigger of the workflow
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-flask-server-and-script:
    runs-on: ubuntu-latest  # You can use 'macos-latest' if you prefer macOS runner

    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Python (required for Flask server and script)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 3: Install dependencies from requirements.txt (if applicable)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install your dependencies

      # Step 4: Create a log file with the current date in the filename
      - name: Create log file with date and time
        run: |
          LOG_FILE="logs/$(date +'%m-%d-%Y').log"
          mkdir -p logs  # Create logs directory if not already there
          touch "$LOG_FILE"
          echo "$(date): Cron job started" >> "$LOG_FILE"

      # Step 5: Start Flask server in background
      - name: Start Flask server
        run: |
          cd iMessage-API
          nohup python3 server.py &
          FLASK_PID=$!
          echo "$(date): Flask server started with PID $FLASK_PID" >> "$LOG_FILE"
        continue-on-error: true  # This allows the job to continue even if this step fails

      # Step 6: Wait for Flask server to be responsive (with retries)
      - name: Wait for Flask server to be ready
        run: |
          RETRIES=10
          until curl -s http://127.0.0.1:5000 > /dev/null || [ $RETRIES -eq 0 ]; do
            echo "$(date): Waiting for Flask server to be ready..." >> "$LOG_FILE"
            sleep 2
            ((RETRIES--))
          done

      # Step 7: Run the dependent script
      - name: Run the dependent script
        run: |
          cd ..
          ls
          python3 script.py
          echo "$(date): Dependent script completed" >> "$LOG_FILE"

      # Step 8: Stop the Flask server
      - name: Stop Flask server
        run: |
          kill $FLASK_PID
          echo "$(date): Flask server stopped" >> "$LOG_FILE"

      # Step 9: Upload the log file as an artifact (optional)
      - name: Upload log file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: flask-log
          path: logs/
